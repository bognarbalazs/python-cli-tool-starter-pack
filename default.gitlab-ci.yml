.common_script_snippets:
  setup_custom_ca:
    - |
      CUSTOM_CA_PATH="/home/user/custom_ca.crt"
      # Check the operating system against the /etc/os-release file
      if [ -f /etc/os-release ]; then
          . /etc/os-release
          OS=$ID
      else
          echo -e "The operating system has not been identified.\n/etc/os-release file is missing."
          exit 1
      fi

      echo "Operating system: $OS"

      # Identifying the package manager and installing update-ca-certificates and add custom MBH CA certificate to system's CA store
      case "$OS" in
          debian|ubuntu)
              echo "APT-based system detected (Debian/Ubuntu)."
              apt-get update && apt-get install -y ca-certificates
              cp $CUSTOM_CA_PATH /usr/local/share/ca-certificates/ca.crt
              update-ca-certificates
              ;;
          alpine)
              echo "APK-based system detected (Alpine Linux)."
              apk update && apk add --no-cache ca-certificates
              cp $CUSTOM_CA_PATH /usr/local/share/ca-certificates/ca.crt
              update-ca-certificates
              ;;
          centos|rhel|fedora|amzn)
              echo "YUM-based system detected (CentOS/RHEL/Fedora/Amazon Linux)."
              cp $CUSTOM_CA_PATH /etc/pki/ca-trust/source/anchors/ca.crt
              update-ca-trust
              ;;
          *)
              echo "Unknown or not supported operating system: $OS"
              exit 1
              ;;
      esac

      echo "Custom CA certificate has been added to the system's CA store."

  generate_pypirc_and_pipconf:
    - |
      GITLAB_TOKEN=${GITLAB_TOKEN_NAME}
      cat > $CI_PROJECT_DIR/gen_pypirc.sh << 'EOF'
      #!/bin/sh
      set -euo pipefail

      # Ellenőrizd, hogy a GITLAB_PACKAGE_REGISTRY_TYPE változó meg van-e adva
      if [[ -z "${GITLAB_PACKAGE_REGISTRY_TYPE}" ]]; then
        echo "Error: GITLAB_PACKAGE_REGISTRY_TYPE is not set. Please set it to 'group' or 'project'."
        exit 1
      fi

      # Ellenőrizd, hogy a GITLAB_PACKAGE_REGISTRY_ID változó meg van-e adva
      if [[ "${GITLAB_PACKAGE_REGISTRY_TYPE}" == "group" && -z "${GITLAB_PACKAGE_REGISTRY_ID}" ]]; then
        echo "Error: GITLAB_PACKAGE_REGISTRY_ID is not set. Please set it for group registry."
        exit 1
      elif [[ "${GITLAB_PACKAGE_REGISTRY_TYPE}" == "project" && -z "${GITLAB_PACKAGE_REGISTRY_ID}" ]]; then
        echo "Error: GITLAB_PACKAGE_REGISTRY_ID is not set. Please set it for project registry."
        exit 1
      fi

      # Ellenőrizd, hogy a GITLAB_TOKEN változó meg van-e adva
      if [[ -z "${GITLAB_TOKEN}" ]]; then
        echo "Error: GITLAB_TOKEN is not set. Please set it to authenticate."
        exit 1
      fi

      # PyPI beállítások generálása
      if [[ "${GITLAB_PACKAGE_REGISTRY_TYPE}" == "group" ]]; then
        cat > $CI_PROJECT_DIR/.pypirc <<EOL
      [global]
      trusted-host = ${CI_SERVER_URL#https://}
      [distutils]
      index-servers =
          gitlab-${GITLAB_PACKAGE_REGISTRY_ID}

      [gitlab-${GITLAB_PACKAGE_REGISTRY_ID}]
      repository: ${CI_API_V4_URL}/groups/${GITLAB_PACKAGE_REGISTRY_ID}/-/packages/pypi/simple
      username: __token__
      password: ${GITLAB_TOKEN}
      EOL
        echo ".pypirc file generated for GitLab group registry."

      mkdir -p $CI_PROJECT_DIR/.config/pip
        cat > $CI_PROJECT_DIR/.config/pip/pip.conf <<EOL
      [global]
      trusted-host = ${CI_SERVER_URL#https://}
      extra-index-url = https://__token__:${GITLAB_TOKEN}@${CI_API_V4_URL#https://}/groups/${GITLAB_PACKAGE_REGISTRY_ID}/-/packages/pypi/simple
      EOL
        echo "$CI_PROJECT_DIR/.config/pip/pip.conf file generated for GitLab project registry." 

      elif [[ "${GITLAB_PACKAGE_REGISTRY_TYPE}" == "project" ]]; then
        cat > $CI_PROJECT_DIR/.pypirc <<EOL
      [global]
      trusted-host = ${CI_SERVER_URL#https://}

      [distutils]
      index-servers =
          gitlab-${GITLAB_PACKAGE_REGISTRY_ID}

      [gitlab-${GITLAB_PACKAGE_REGISTRY_ID}]
      repository: ${CI_API_V4_URL}/projects/${GITLAB_PACKAGE_REGISTRY_ID}/packages/pypi/simple
      username: __token__
      password: ${GITLAB_TOKEN}
      EOL
        echo ".pypirc file generated for GitLab project registry."

      mkdir -p $CI_PROJECT_DIR/.config/pip
        cat > $CI_PROJECT_DIR/.config/pip/pip.conf <<EOL
      [global]
      trusted-host = ${CI_SERVER_URL#https://}
      extra-index-url = https://__token__:${GITLAB_TOKEN}@${CI_API_V4_URL#https://}/projects/${GITLAB_PACKAGE_REGISTRY_ID}/packages/pypi/simple
      EOL
        echo "pip.conf file generated for GitLab project registry."      


      else
        echo "Error: Invalid GITLAB_PACKAGE_REGISTRY_TYPE. Please set it to 'group' or 'project'."
        exit 1
      fi
      EOF

      chmod +x $CI_PROJECT_DIR/gen_pypirc.sh

      source $CI_PROJECT_DIR/gen_pypirc.sh

.aws_script_snippets:
  define_login_env_variables:
    - export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
    - export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
    - export AWS_DEFAULT_REGION="${AWS_REGION_NAME}"
    - export AWS_DEFAULT_OUTPUT="${AWS_OUTPUT}"
  authenticate_by_role_with_sts:
    - |
      aws sts assume-role --role-arn "${ROLE_ARN}" --role-session-name "${CI_PROJECT_NAME}_${CI_JOB_ID}" --source-identity ${SOURCE_IDENTITY} > /tmp/assume-role-output
    - export AWS_ACCESS_KEY_ID=$(cat /tmp/assume-role-output | jq -r '.Credentials.AccessKeyId')
    - export AWS_SECRET_ACCESS_KEY=$(cat /tmp/assume-role-output | jq -r '.Credentials.SecretAccessKey')
    - export AWS_SESSION_TOKEN=$(cat /tmp/assume-role-output | jq -r '.Credentials.SessionToken')

.semver_script_snippets:
  check_releaserc:
    - |
      cat > check_releaserc.sh << 'EOF'
      #!/bin/sh
      set -euo pipefail

      extensions=".yaml .yml .json .js .cjs .mjs \"\""

      found=0

      for ext in $extensions; do
          if [ "$ext" = "\"\"" ]; then
              file=".releaserc"
          else
              file=".releaserc$ext"
          fi

          if [ -f "$file" ]; then
              found=1
              break
          fi
      done

      if [ "$found" -eq 0 ]; then
          echo "No .releaserc file found with one of the following acceptable file formats: .yaml .yml .json .js .cjs .mjs or without extension"
          exit 1
      fi
      EOF

      chmod +x ./check_releaserc.sh

      ./check_releaserc.sh
